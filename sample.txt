namespace Fmr.Quote.Nunit.Tests;

using Fmr.Nebula.Quote.Interfaces;
using Fmr.Nebula.Quote.Models;
using Fmr.NovaUI.Annotations.Constants;
using Fmr.Quote.Streaming.Interfaces;
using Fmr.Quote.Streaming.Models;
using Fmr.Quote.Streaming.Parsers;
using Fmr.Quote.Tests.Streaming.Parser;
using Moq;
using Assert = global::NUnit.Framework.Assert;

[TestFixture]
public class EquityParserTests : IClassFixture<SharedQuoteServiceFixture>, IClassFixture<GetJsonQuoteDataFixture>, IClassFixture<GetRawJsonQuoteDataFixture>
{
    private readonly SharedQuoteServiceFixture _fixture;
    private readonly GetJsonQuoteDataFixture _jsonFixture;
    private readonly GetRawJsonQuoteDataFixture _jsonRawFixture;
    private readonly Mock<IFidelityDateTimeService> _mockDateTimeService;

    private ParseSecurityQuoteData _securityQuoteData;
    private bool _shouldUseRolloverValues;
    private SecurityQuoteParser _securityQuoteParser;
    private readonly IQuoteParsingFactory _quoteParsingFactory;

    public EquityParserTests(SharedQuoteServiceFixture fixture, GetJsonQuoteDataFixture jsonFixture, GetRawJsonQuoteDataFixture jsonRaw)
    {
        _fixture = fixture;
        _jsonFixture = jsonFixture;
        _jsonRawFixture = jsonRaw;
        _quoteParsingFactory = new QuoteParsingFactory(fixture.SharedQuoteService);
        _securityQuoteParser = _quoteParsingFactory.GetQuoteParser(jsonFixture.ParsedSecurityQuote);
        _mockDateTimeService = new Mock<IFidelityDateTimeService>();
    }

    [Test]
    public void EtfParserTest()
    {
        Assert.IsInstanceOf<EquityParser>(_securityQuoteParser);

        Quote quote = _securityQuoteParser.ParseQuoteData(_jsonFixture.ParsedSecurityQuote,
                                                          _shouldUseRolloverValues,
                                                          _fixture.SharedQuoteService,
                                                          _mockDateTimeService.Object);
        Assert.NotNull(quote);
        Assert.IsInstanceOf<EquityQuote>(quote);
        AssertEtfQuote((EquityQuote)quote);
    }

    private void AssertEtfQuote(EquityQuote quote)
    {
        Assert.AreEqual("FINY", quote.LastExchange);
        Assert.AreEqual("H", quote.LastExchangeAbbreviated);
        Assert.AreEqual(string.Empty, quote.FinancialStat);
        Assert.AreEqual(string.Empty, quote.TradeHaltCode);
        Assert.AreEqual(string.Empty, quote.TradeHaltReason);
        Assert.AreEqual("Technology Hardware, Storage & Peripherals", quote.Industry);
        Assert.AreEqual("Technology Hardware, Storage & Peripherals1", quote.SubIndustry);
        Assert.AreEqual(1.4316, quote.Dividend);
        Assert.AreEqual("XNMS", quote.BidExchange);
        Assert.AreEqual("S", quote.BidExchangeAbbreviated);
        Assert.AreEqual("SPY", quote.FpsSymbol);
        Assert.AreEqual("SPY", quote.UnderlyingSymbol);
        Assert.True(quote.PrevTradeDate != DateTime.MinValue, "PrevTradeDate is not set");
        Assert.True(19L == quote.AskSize, "AskSize doesn't match");
        Assert.NotNull(quote.Security);
        Assert.True(quote.Security.IsEtf);
        Assert.AreEqual("SPY", quote.Security.Symbol);
        Assert.AreEqual(925182116, quote.SharesOutstanding);
        Assert.AreEqual(string.Empty, quote.SplitFactor);
        Assert.False(quote.SplitDate.HasValue);
    }

    [Test]
    public void ETFParserTest_shouldUseRolloverValues_IsTrue()
    {
        _shouldUseRolloverValues = true;
        Quote quote = _securityQuoteParser.ParseQuoteData(_jsonFixture.ParsedSecurityQuote,
                                                          _shouldUseRolloverValues,
                                                          _fixture.SharedQuoteService,
                                                          _mockDateTimeService.Object);
        Assert.NotNull(quote);
        Assert.IsInstanceOf<EquityQuote>(quote);
        AssertETFQuote_UserRolloverValues((EquityQuote)quote);
    }

    private void AssertETFQuote_UserRolloverValues(EquityQuote quote)
    {
        Assert.AreEqual("FINY", quote.LastExchange);
        Assert.AreEqual("H", quote.LastExchangeAbbreviated);
        Assert.AreEqual(string.Empty, quote.FinancialStat);
        Assert.AreEqual(string.Empty, quote.TradeHaltCode);
        Assert.AreEqual(string.Empty, quote.TradeHaltReason);
        Assert.AreEqual("Technology Hardware, Storage & Peripherals", quote.Industry);
        Assert.AreEqual("Technology Hardware, Storage & Peripherals1", quote.SubIndustry);
        Assert.AreEqual(1.4316, quote.Dividend);
        Assert.AreEqual("XNMS", quote.BidExchange);
        Assert.AreEqual("S", quote.BidExchangeAbbreviated);
        Assert.AreEqual("SPY", quote.FpsSymbol);
        Assert.AreEqual("SPY", quote.UnderlyingSymbol);
        Assert.True(quote.PrevTradeDate != DateTime.MinValue, "PrevTradeDate is not set");
        Assert.True(19L == quote.AskSize, "AskSize doesn't match");
        Assert.NotNull(quote.Security);
        Assert.True(quote.Security.IsEtf);
        Assert.AreEqual("SPY", quote.Security.Symbol);

        Assert.False(string.IsNullOrWhiteSpace(_jsonFixture.ParsedSecurityQuote.PrevClose));
        Assert.AreEqual(190.9291, quote.RollingLastPrice);

        Assert.False(string.IsNullOrWhiteSpace(_jsonFixture.ParsedSecurityQuote.PrevOpenPrice));
        Assert.AreEqual(299.14, quote.OpenPrice);

        Assert.AreEqual(925182116, quote.SharesOutstanding);
        Assert.AreEqual(string.Empty, quote.SplitFactor);
        Assert.False(quote.SplitDate.HasValue);
    }

    [Test]
    public void EquityParser_Apple_Test()
    {
        ParseSecurityQuoteData parsedSecurityQuote = _jsonRawFixture.AppleParsedSecurityQuote;

        _securityQuoteParser = null;
        _securityQuoteParser = _quoteParsingFactory.GetQuoteParser(parsedSecurityQuote);
        Quote quote = _securityQuoteParser.ParseQuoteData(parsedSecurityQuote,
                                                          _shouldUseRolloverValues,
                                                          _fixture.SharedQuoteService,
                                                          _mockDateTimeService.Object);
        Assert.NotNull(quote);
        Assert.IsInstanceOf<EquityQuote>(quote);
        AssertEquityQuote((EquityQuote)quote);
    }

    private void AssertEquityQuote(EquityQuote quote)
    {
        Assert.AreEqual("XNMS", quote.LastExchange);
        Assert.AreEqual("S", quote.LastExchangeAbbreviated);
        Assert.AreEqual(string.Empty, quote.FinancialStat);
        Assert.AreEqual(string.Empty, quote.TradeHaltCode);
        Assert.AreEqual(string.Empty, quote.TradeHaltReason);
        Assert.AreEqual("Technology Hardware, Storage & Peripherals", quote.Industry);
        Assert.AreEqual("Technology Hardware, Storage & Peripherals", quote.SubIndustry);
        Assert.AreEqual(0.23, quote.Dividend);
        Assert.AreEqual("ARCX", quote.BidExchange);
        Assert.AreEqual("A", quote.BidExchangeAbbreviated);
        Assert.AreEqual("AAPL", quote.FpsSymbol);
        Assert.AreEqual("AAPL", quote.UnderlyingSymbol);
        Assert.True(quote.PrevTradeDate != DateTime.MinValue, "PrevTradeDate is not set");
        Assert.True(2L == quote.AskSize, "AskSize doesn't match");
        Assert.NotNull(quote.Security);
        Assert.False(quote.Security.IsEtf);
        Assert.AreEqual("AAPL", quote.Security.Symbol);

        Assert.AreEqual(16070752000, quote.SharesOutstanding);
        Assert.AreEqual("4:1", quote.SplitFactor);
        Assert.True(quote.SplitDate.HasValue);
        Assert.AreEqual("08/31/2020", quote.SplitDate.Value.ToString(FormatConstants.DateFormatUsDate));
    }

    [Test]
    public void EquityParserTest_shouldUseRolloverValues_IsTrue()
    {
        _shouldUseRolloverValues = true;
        ParseSecurityQuoteData parsedSecurityQuote = _jsonRawFixture.AppleParsedSecurityQuote;

        _securityQuoteParser = null;
        _securityQuoteParser = _quoteParsingFactory.GetQuoteParser(parsedSecurityQuote);
        Quote quote = _securityQuoteParser.ParseQuoteData(parsedSecurityQuote,
                                                          _shouldUseRolloverValues,
                                                          _fixture.SharedQuoteService,
                                                          _mockDateTimeService.Object);
        Assert.NotNull(quote);
        Assert.IsInstanceOf<EquityQuote>(quote);
        AssertEquityQuote_UserRolloverValues((EquityQuote)quote, parsedSecurityQuote);
    }

    private void AssertEquityQuote_UserRolloverValues(EquityQuote quote, ParseSecurityQuoteData parseSecurityQuoteData)
    {
        Assert.AreEqual("XNMS", quote.LastExchange);
        Assert.AreEqual("S", quote.LastExchangeAbbreviated);
        Assert.AreEqual(string.Empty, quote.FinancialStat);
        Assert.AreEqual(string.Empty, quote.TradeHaltCode);
        Assert.AreEqual(string.Empty, quote.TradeHaltReason);
        Assert.AreEqual("Technology Hardware, Storage & Peripherals", quote.Industry);
        Assert.AreEqual("Technology Hardware, Storage & Peripherals", quote.SubIndustry);
        Assert.AreEqual(0.23, quote.Dividend);
        Assert.AreEqual("ARCX", quote.BidExchange);
        Assert.AreEqual("A", quote.BidExchangeAbbreviated);
        Assert.AreEqual("AAPL", quote.FpsSymbol);
        Assert.AreEqual("AAPL", quote.UnderlyingSymbol);
        Assert.True(quote.PrevTradeDate != DateTime.MinValue, "PrevTradeDate is not set");
        Assert.True(2L == quote.AskSize, "AskSize doesn't match");
        Assert.NotNull(quote.Security);
        Assert.False(quote.Security.IsEtf);
        Assert.AreEqual("AAPL", quote.Security.Symbol);

        Assert.False(string.IsNullOrWhiteSpace(parseSecurityQuoteData.PrevClose));
        Assert.AreEqual(155.47, quote.OpenPrice);

        Assert.AreEqual(16070752000, quote.SharesOutstanding);
        Assert.AreEqual("4:1", quote.SplitFactor);
        Assert.True(quote.SplitDate.HasValue);
        Assert.AreEqual("08/31/2020", quote.SplitDate.Value.ToString(FormatConstants.DateFormatUsDate));
    }

    [Test]
    public void GetExchangeNameTest()
    {
        TestEquityParser testQuityParser = new();
        string exchangeName = string.Empty;
        string ret = testQuityParser.TestGetExchangeName(exchangeName);
        Assert.NotNull(ret);
        Assert.True(ret == "N/A");

        //dummy statement, just to inject SharedQuoteService into parser
        _ = testQuityParser.ParseQuoteData(_jsonFixture.ParsedSecurityQuote,
                                           _shouldUseRolloverValues,
                                           _fixture.SharedQuoteService,
                                           _mockDateTimeService.Object);

        exchangeName = "Q";
        ret = testQuityParser.TestGetExchangeName(exchangeName);
        Assert.NotNull(ret);
        Assert.True(ret == "NASDAQ-NMS");
    }

    [Test]
    public void EtfRollingLastFieldsParserTest()
    {
        Assert.IsInstanceOf<EquityParser>(_securityQuoteParser);

        Quote quote = _securityQuoteParser.ParseQuoteData(_jsonFixture.ParsedSecurityQuote,
                                                          _shouldUseRolloverValues,
                                                          _fixture.SharedQuoteService,
                                                          _mockDateTimeService.Object);
        Assert.NotNull(quote);
        Assert.IsInstanceOf<EquityQuote>(quote);
        AssertEtfQuoteRollingLastFields((EquityQuote)quote);
    }

    private static void AssertEtfQuoteRollingLastFields(EquityQuote quote)
    {
        Assert.AreEqual(190.9291, quote.RollingLastPrice);
        Assert.AreEqual(200, quote.RollingLastSize);
        DateTime dateVal = new(2023, 07, 14);
        if (quote.RollingLastDate != null)
        {
            Assert.AreEqual(dateVal, quote.RollingLastDate.Value.Date);
        }
        if (quote.RollingLastTime != null)
        {
            Assert.AreEqual(quote.RollingLastTime, new DateTime(2023, 07, 14, 10, 14, 49));
        }
    }
}

/// <summary>
/// Test class to allow access to protected member in EquityParser
/// </summary>
internal class TestEquityParser : EquityParser
{
    public string TestGetExchangeName(string exchangeName)
    {
        return GetExchangeName(exchangeName);
    }
}


namespace Fmr.Quote.Tests.Streaming.Parser;

using System;
using Fmr.Quote.Streaming.Interfaces;
using Fmr.Quote.Streaming.Services;

public class SharedQuoteServiceFixture : IDisposable
{
    public SharedQuoteServiceFixture()
    {
        SharedQuoteService = new SharedQuoteService();
    }

    public void Dispose()
    {
        SharedQuoteService.Dispose();
    }

    public ISharedQuoteService SharedQuoteService { get; }
}
